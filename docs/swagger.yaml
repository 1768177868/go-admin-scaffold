basePath: /api
definitions:
  models.Permission:
    properties:
      action:
        type: string
      created_at:
        type: string
      description:
        type: string
      display_name:
        type: string
      id:
        type: integer
      module:
        type: string
      name:
        type: string
      resource:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      status:
        type: integer
      updated_at:
        type: string
    type: object
  models.Role:
    properties:
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      perm_list:
        items:
          type: string
        type: array
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
      status:
        type: integer
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      nickname:
        type: string
      phone:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      status:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  response.PageData:
    properties:
      list:
        description: List data
      page:
        description: Current page
        type: integer
      page_size:
        description: Page size
        type: integer
      pages:
        description: Total pages
        type: integer
      total:
        description: Total count
        type: integer
    type: object
  response.Response:
    properties:
      code:
        description: Business status code
        type: integer
      data:
        description: Response data
      message:
        description: Response message
        type: string
      trace_id:
        description: Trace ID for request tracking
        type: string
    type: object
  services.CreateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      nickname:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role_ids:
        items:
          type: integer
        type: array
      status:
        type: integer
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  ws.Message:
    properties:
      content:
        type: string
      from:
        type: string
      timestamp:
        type: integer
      to:
        description: User ID or Group ID
        type: string
      type:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: A modern Go admin scaffold API server.
  title: Go Admin Scaffold API
  version: "1.0"
paths:
  /admin/v1/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/response.PageData'
                  - properties:
                      list:
                        items:
                          $ref: '#/definitions/models.User'
                        type: array
                    type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/services.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Create user
      tags:
      - users
  /admin/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get user
      tags:
      - users
  /upload/file:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to storage (local or S3)
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: File type (image, document, video, audio)
        in: formData
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload file
      tags:
      - Upload
  /ws:
    get:
      consumes:
      - application/json
      description: Establishes a WebSocket connection for real-time chat
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: JWT Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols to websocket
          schema:
            type: string
      summary: Connect to WebSocket
      tags:
      - WebSocket
  /ws/join:
    post:
      consumes:
      - application/json
      description: Adds a user to a chat group
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Group ID
        in: query
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Join Chat Group
      tags:
      - WebSocket
  /ws/leave:
    post:
      consumes:
      - application/json
      description: Removes a user from a chat group
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Group ID
        in: query
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Leave Chat Group
      tags:
      - WebSocket
  /ws/send:
    post:
      consumes:
      - application/json
      description: Sends a message (private, group, or announcement)
      parameters:
      - description: Message Object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/ws.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send Message
      tags:
      - WebSocket
swagger: "2.0"
